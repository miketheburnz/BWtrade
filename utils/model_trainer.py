import numpy as npimport pandas as pdfrom keras.models import load_model, Sequentialfrom keras.layers import LSTM, Dense, Inputimport xgboost as xgbfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import accuracy_scorefrom utils.logger import setup_logginglogger = setup_logging('model_trainer.log')def load_models(currency_pairs):    models = {}    for pair in currency_pairs:        model_path = f'models/lstm_model_{pair}.keras'        try:            models[pair] = load_model(model_path)            logger.info(f"Loaded model for {pair}")        except Exception as e:            logger.error(f"Error loading model for {pair}: {e}")    return modelsdef prepare_prediction_data(data):    return np.array(data).reshape(1, -1, 1)def predict(models, pair, data):    model = models.get(pair)    if not model:        logger.error(f"No model found for {pair}")        return None    return model.predict(data)def train_xgboost_model(data):    features = ['SMA', 'EMA', 'MACD', 'MACD_signal', 'RSI', 'BB_upper', 'BB_lower', 'ATR']    X = data[features].shift().dropna()    y = (data['Close'].shift(-1) > data['Close']).astype(int).iloc[:-1]    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)    model = xgb.XGBClassifier()    model.fit(X_train, y_train)        y_pred = model.predict(X_test)    accuracy = accuracy_score(y_test, y_pred)    logger.info(f"XGBoost model accuracy: {accuracy}")    return modeldef create_dataset(data, look_back=1):    X, Y = [], []    for i in range(len(data) - look_back):        a = data[i:(i + look_back), 0]        X.append(a)        Y.append(data[i + look_back, 0])    return np.array(X), np.array(Y)def train_lstm_model(pair, data):    look_back = 10    X, Y = create_dataset(data, look_back)    train_size = int(len(X) * 0.8)    X_train, X_test = X[:train_size], X[train_size:]    Y_train, Y_test = Y[:train_size], Y[train_size:]    X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))    X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))    model = Sequential()    model.add(Input(shape=(look_back, 1)))    model.add(LSTM(50, return_sequences=True))    model.add(LSTM(50))    model.add(Dense(1))    model.compile(loss='mean_squared_error', optimizer='adam')    model.fit(X_train, Y_train, epochs=20, batch_size=1, verbose=2)    model_path = f'models/lstm_model_{pair}.keras'    model.save(model_path)    logger.info(f"Model for {pair} saved at {model_path}")